import streamlit as st
import pandas as pd
from io import StringIO, BytesIO
from reportlab.lib.pagesizes import letter
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.lib.units import inch
import tempfile
import os

def assign_grade(total_marks):
    if total_marks >= 90:
        return 'A+'
    elif total_marks >= 80:
        return 'A'
    elif total_marks >= 70:
        return 'B+'
    elif total_marks >= 60:
        return 'B'
    elif total_marks >= 50:
        return 'C'
    else:
        return 'F'

def generate_report_card_text(student_data):
    report = f"--- Report Card for {student_data['Name']} ---\n\n"
    report += f"Student ID: {student_data['Student ID']}\n"
    report += f"Class: {student_data['Class']}\n\n"
    report += "Marks:\n"
    for subject, marks in student_data['Marks'].items():
        report += f"  {subject}: {marks}\n"
    report += f"\nTotal Marks: {student_data['Total Marks']}\n"
    report += f"Grade: {student_data['Grade']}\n"
    report += "\n----------------------------------------\n"
    return report

def generate_report_card_pdf(student_data, filename):
    doc = SimpleDocTemplate(filename, pagesize=letter)
    styles = getSampleStyleSheet()
    story = []

    story.append(Paragraph(f"<b>Report Card - {student_data['Name']}</b>", styles['Title']))
    story.append(Spacer(1, 0.2 * inch))

    story.append(Paragraph(f"<b>Student ID:</b> {student_data['Student ID']}", styles['Normal']))
    story.append(Paragraph(f"<b>Class:</b> {student_data['Class']}", styles['Normal']))
    story.append(Spacer(1, 0.2 * inch))

    story.append(Paragraph("<b><u>Marks:</u></b>", styles['h2']))
    for subject, marks in student_data['Marks'].items():
        story.append(Paragraph(f"<b>{subject}:</b> {marks}", styles['Normal']))
    story.append(Spacer(1, 0.2 * inch))

    story.append(Paragraph(f"<b>Total Marks:</b> {student_data['Total Marks']}", styles['Normal']))
    story.append(Paragraph(f"<b>Grade:</b> {student_data['Grade']}", styles['Normal']))
    story.append(Spacer(1, 0.4 * inch))

    story.append(Paragraph("<i>Generated by Student Grading System</i>", styles['Italic']))

    doc.build(story)


st.set_page_config(layout="centered", page_title="Student Grading System", page_icon="üìù")

st.title("üìù Student Grading and Report System")
st.markdown("Upload a **CSV** or **Excel** file containing student marks to generate report cards.")

st.sidebar.header("CSV/Excel Format Instructions")
st.sidebar.markdown("""
Your file should have the following columns:
- **`Student ID`** (Unique identifier for the student)
- **`Name`** (Student's full name)
- **`Class`** (Student's class or grade level)
- And columns for **each subject** (e.g., `Math`, `Science`, `English`, etc.)
""")
st.sidebar.markdown("---")
st.sidebar.info("### Example CSV Content:\n```\nStudent ID,Name,Class,Math,Science,English\n101,Alice,10,95,88,92\n102,Bob,10,78,65,70\n```")

uploaded_file = st.file_uploader(
    "Choose your student marks file (CSV or Excel)",
    type=["csv", "xlsx", "xls", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"]
)

if uploaded_file is not None:
    try:
        file_mime_type = uploaded_file.type
        file_extension = uploaded_file.name.split('.')[-1].lower()
        dataframe = None

        if 'csv' in file_mime_type or file_extension == 'csv':
            dataframe = pd.read_csv(uploaded_file)
            st.success("CSV file uploaded successfully!")
        elif 'excel' in file_mime_type or file_extension in ['xlsx', 'xls']:
            dataframe = pd.read_excel(uploaded_file)
            st.success("Excel file uploaded successfully!")
        else:
            st.error(f"Unsupported file type detected: '{file_mime_type}'. "
                     "Please upload a standard CSV (.csv) or Excel (.xlsx, .xls) file.")
            st.stop()

        st.subheader("Raw Data Preview")
        st.dataframe(dataframe)

        dataframe.columns = dataframe.columns.str.strip()

        required_columns = {'Student ID', 'Name', 'Class'}
        if not required_columns.issubset(dataframe.columns):
            missing_cols = required_columns - set(dataframe.columns)
            st.error(f"Error: The file must contain the following columns: {', '.join(missing_cols)}. Please check your file's headers.")
            st.warning("Please ensure column names exactly match 'Student ID', 'Name', and 'Class' (case-sensitive, no extra spaces).")
        else:
            subject_columns = [col for col in dataframe.columns if col not in required_columns]
            if not subject_columns:
                st.warning("No subject columns found. Please ensure your file has columns for subject marks (e.g., 'Math', 'Science').")
            else:
                st.subheader("Processing Marks and Assigning Grades...")
                processed_data = []
                for index, row in dataframe.iterrows():
                    try:
                        student_id = row['Student ID']
                        name = row['Name']
                        student_class = row['Class']

                        marks = {}
                        for subject in subject_columns:
                            try:
                                mark_value = float(row[subject])
                                marks[subject] = int(mark_value) if mark_value == int(mark_value) else mark_value
                            except (ValueError, TypeError):
                                marks[subject] = 0
                                st.warning(f"Warning: Invalid mark found for student '{name}', subject '{subject}'. Assuming 0.")

                        total_marks = sum(marks.values())
                        grade = assign_grade(total_marks)

                        processed_data.append({
                            'Student ID': student_id,
                            'Name': name,
                            'Class': student_class,
                            'Marks': marks,
                            'Total Marks': total_marks,
                            'Grade': grade
                        })
                    except KeyError as ke:
                        st.error(f"Data processing error: Missing expected column '{ke}' in row {index + 2}. Please check your file's headers carefully.")
                        processed_data = []
                        break
                    except Exception as e:
                        st.error(f"An unexpected error occurred while processing row {index + 2}: {e}")
                        processed_data = []
                        break

                if processed_data:
                    st.success("Grades assigned successfully!")

                    display_df = pd.DataFrame([
                        {'Student ID': s['Student ID'], 'Name': s['Name'], 'Class': s['Class'],
                         'Total Marks': s['Total Marks'], 'Grade': s['Grade']}
                        for s in processed_data
                    ])
                    st.subheader("Summary of Grades")
                    st.dataframe(display_df.set_index('Student ID'))

                    st.subheader("Generate Individual Report Cards")

                    student_names = [s['Name'] for s in processed_data]
                    selected_student_name = st.selectbox("Select a student to generate their report card:", student_names)

                    if selected_student_name:
                        selected_student_data = next((s for s in processed_data if s['Name'] == selected_student_name), None)

                        if selected_student_data:
                            st.markdown(f"### Report Card for {selected_student_data['Name']}")

                            st.write(f"**Student ID:** {selected_student_data['Student ID']}")
                            st.write(f"**Class:** {selected_student_data['Class']}")
                            st.write("**Marks:**")
                            for subject, mark in selected_student_data['Marks'].items():
                                st.write(f"  - {subject}: {mark}")
                            st.write(f"**Total Marks:** {selected_student_data['Total Marks']}")
                            st.write(f"**Grade:** {selected_student_data['Grade']}")
                            st.markdown("---")

                            st.subheader("Download Report Card")

                            text_report = generate_report_card_text(selected_student_data)
                            st.download_button(
                                label="Download Text Report Card",
                                data=text_report,
                                file_name=f"{selected_student_data['Name']}_Report_Card.txt",
                                mime="text/plain"
                            )

                            with tempfile.NamedTemporaryFile(delete=False, suffix=".pdf") as tmpfile:
                                pdf_filename = tmpfile.name
                            generate_report_card_pdf(selected_student_data, pdf_filename)

                            with open(pdf_filename, "rb") as file:
                                st.download_button(
                                    label="Download PDF Report Card",
                                    data=file.read(),
                                    file_name=f"{selected_student_data['Name']}_Report_Card.pdf",
                                    mime="application/pdf"
                                )
                            os.remove(pdf_filename)

    except pd.errors.EmptyDataError:
        st.error("The uploaded file is empty. Please upload a file with data.")
    except pd.errors.ParserError:
        st.error("Could not parse the file. Please ensure it's a well-formatted CSV or Excel file.")
    except Exception as e:
        st.error(f"An unexpected error occurred during file processing: {e}. Please check your file format and data.")

st.markdown("Created with ‚ù§Ô∏è using Streamlit")